<UserControl x:Class="RowsSharp.View.Editor"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:view="clr-namespace:RowsSharp.View"
      xmlns:viewmodel="clr-namespace:RowsSharp.ViewModel"
      d:DataContext="{d:DesignInstance Type=viewmodel:EditorViewModel}"
      mc:Ignorable="d" 
      d:DesignWidth="1400" d:DesignHeight="600" d:Background="{StaticResource Rows.Background}">

    <UserControl.Resources>
        <Style TargetType="ToolTip">
            <Setter Property="Background" Value="{StaticResource Rows.Background}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Preferences.UserInterface.IsToolTipEnabled, Mode=OneWay}" Value="False">
                    <Setter Property="Template" Value="{x:Null}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <view:InvertBooleanConverter x:Key="InvertBooleanConverter"/>
        <view:PathToImageConverter x:Key="PathToImageConverter"/>
    </UserControl.Resources>

    <DockPanel Margin="24,8">
        <DockPanel DockPanel.Dock="Top" Background="{StaticResource Rows.Header}" Margin="-24,-8,-24,16">
            <DockPanel.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="FontFamily" Value="{StaticResource Symbol}"/>
                    <Setter Property="FontSize" Value="{StaticResource Rows.IconFontSize}"/>
                    <Setter Property="Margin" Value="4,12"/>
                    <Setter Property="Padding" Value="4,0"/>
                    <!-- Width is generally larger than height -->
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"/>
                </Style>
                <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="FontFamily" Value="{StaticResource Symbol}"/>
                    <Setter Property="FontSize" Value="{StaticResource Rows.IconFontSize}"/>
                    <Setter Property="Margin" Value="4,12"/>
                    <Setter Property="Padding" Value="4,0"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"/>
                </Style>
                <Style TargetType="Rectangle">
                    <Setter Property="Margin" Value="8,16"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                    <Setter Property="Fill" Value="{StaticResource Separator.Fill}"/>
                    <Setter Property="Width" Value="1"/>
                </Style>
            </DockPanel.Resources>

            <!-- Save -->
            <Button Margin="16,8,8,8" Content="&#xe161;" ToolTip="Save" Command="{Binding Save, Mode=OneTime}"/>
            <!-- Autosave -->
            <ToggleButton ToolTip="Autosave" IsChecked="{Binding Preferences.Editor.IsAutosaveEnabled}" IsEnabled="{Binding Preferences.Editor.CanEdit, Mode=OneWay}">
                <ToggleButton.Style>
                    <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Content" Value="&#xe425;"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Content" Value="&#xe426;"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="Content" Value="&#xe426;"/>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            <Rectangle/>
            <!-- Undo -->
            <Button Content="&#xe166;" ToolTip="Undo" Command="{Binding Undo, Mode=OneTime}"/>
            <!-- Redo -->
            <Button Content="&#xe15a;" ToolTip="Redo" Command="{Binding Redo, Mode=OneTime}"/>
            <Rectangle/>
            <!-- Edit -->
            <ToggleButton IsChecked="{Binding Preferences.Editor.CanEdit}" ToolTip="Editing">
                <ToggleButton.Style>
                    <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Content" Value="&#xe3c9;"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="Content" Value="&#xe950;"/>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            <!-- Template -->
            <ToggleButton Content="&#xf76f;" ToolTip="Template rows" IsChecked="{Binding Preferences.Editor.IsTemplateEnabled}"/>
            <!-- Insert Above -->
            <Button Content="&#xf0fb;" ToolTip="Insert row above"
                    CommandParameter="{x:Static viewmodel:Position.Before}" Command="{Binding InsertRow, Mode=OneTime}"/>
            <!-- Insert Below -->
            <Button Content="&#xf0fb;" RenderTransformOrigin="0.5,0.5" ToolTip="Insert row below"
                    CommandParameter="{x:Static viewmodel:Position.After}" Command="{Binding InsertRow, Mode=OneTime}">
                <Button.RenderTransform>
                    <ScaleTransform ScaleY="-1"/>
                </Button.RenderTransform>
            </Button>
            <!-- Insert Left -->
            <Button Content="&#xf0fb;" RenderTransformOrigin="0.5,0.5" ToolTip="Insert column left"
                    CommandParameter="{x:Static viewmodel:Position.Before}" Command="{Binding InsertColumn, Mode=OneTime}">
                <Button.RenderTransform>
                    <RotateTransform CenterX="0" CenterY="0" Angle="-90"/>
                </Button.RenderTransform>
            </Button>
            <!-- Insert Right -->
            <Button Content="&#xf0fb;" RenderTransformOrigin="0.5,0.5" ToolTip="Insert column right"
                    CommandParameter="{x:Static viewmodel:Position.After}" Command="{Binding InsertColumn, Mode=OneTime}">
                <Button.RenderTransform>
                    <RotateTransform CenterX="0" CenterY="0" Angle="90"/>
                </Button.RenderTransform>
            </Button>
            <!-- Remove Row -->
            <Button Content="&#xeb80;" ToolTip="Remove selected rows"
                    Command="{Binding RemoveSelectedRows, Mode=OneTime}"/>
            <!-- Remove Column -->
            <Button Content="&#xeb80;" RenderTransformOrigin="0.5,0.5" ToolTip="Remove selected columns"
                    Command="{Binding RemoveSelectedColumns, Mode=OneTime}">
                <Button.RenderTransform>
                    <TransformGroup>
                        <RotateTransform Angle="90"/>
                        <ScaleTransform ScaleX="-1"/>
                    </TransformGroup>
                </Button.RenderTransform>
            </Button>
            <Rectangle/>
            <Button DockPanel.Dock="Right" Margin="0,0,8,0" Command="{Binding OpenHome, Mode=OneTime}" Content="&#xe88a;" ToolTip="Home"/>
            <Button DockPanel.Dock="Right" Margin="0,0,8,0" Command="{Binding OpenPreferences, Mode=OneTime}" Content="&#xe8b8;" ToolTip="Preferences"/>
            <Rectangle DockPanel.Dock="Right"/>

            <ToggleButton Command="{Binding InvokeFilter, Mode=OneTime}" IsChecked="{Binding Preferences.Filter.IsRegexEnabled}" Content="&#xf750;" ToolTip="Use regular expressions in filters"/>

            <Button DockPanel.Dock="Right" Content="&#xe164;" ToolTip="Clear sorting"
                          CommandParameter="{Binding ElementName=Grid, Path=Columns}" Command="{Binding ResetSorting, Mode=OneTime}"/>

            <Button DockPanel.Dock="Right" Command="{Binding InvokeFilter, Mode=OneTime}" Content="&#xe8b6;" ToolTip="Find"/>

            <Grid DockPanel.Dock="Right" VerticalAlignment="Center" Grid.Column="1">
                <TextBlock Foreground="{StaticResource Rows.Caption}" Background="{StaticResource TextBox.Background}"
                           FontFamily="{StaticResource Rows.FontFamily}" FontSize="{StaticResource Rows.PrimaryFontSize}"
                           Margin="8" Padding="7,4">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FilterText, Mode=OneWay}" Value="">
                                    <Setter Property="Text" Value="Filter"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBox Margin="8" Padding="4,2" VerticalContentAlignment="Center" Background="Transparent" 
                         FontFamily="{StaticResource Rows.FontFamily}" FontSize="{StaticResource Rows.PrimaryFontSize}"
                         Text="{Binding FilterText, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.Style>
                        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsFilterFocused, Mode=OneWay}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding InvokeFilter, Mode=OneTime}"/>
                    </TextBox.InputBindings>
                </TextBox>
            </Grid>
        </DockPanel>

        <DockPanel DockPanel.Dock="Bottom" Margin="-24,16,-24,-12">
            <DockPanel.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource Caption}">
                    <Setter Property="Margin" Value="16,8,16,10"/>
                </Style>
            </DockPanel.Resources>
            <TextBlock MinWidth="128">
                <Run Text="{Binding SelectedColumnsCount, Mode=OneWay}"/>
                <Run Text="×"/>
                <Run Text="{Binding SelectedRowsCount, Mode=OneWay}"/>
                <Run Text="selected"/>
            </TextBlock>
            <TextBlock MinWidth="128">
                <Run Text="{Binding CollectionView.Count, Mode=OneWay}"/>
                <Run Text="of"/>
                <Run Text="{Binding Table.Records.Count, Mode=OneWay}"/>
                <Run Text="rows"/>
            </TextBlock>
            <TextBlock MinWidth="128">
                <Run Text="{Binding Table.Headers.Count, Mode=OneWay}"/>
                <Run Text="columns"/>
            </TextBlock>
        </DockPanel>

        <Grid DockPanel.Dock="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Preferences.Editor.Width, Mode=OneTime}"/>
                <ColumnDefinition Width="{Binding Preferences.Preview.Width, Mode=OneTime}"/>
            </Grid.ColumnDefinitions>
            <DataGrid Name="Grid"
                    ItemsSource="{Binding CollectionView, Mode=OneTime}" AutoGenerateColumns="False"
                    FontFamily="{StaticResource Rows.FontFamily}"
                    Foreground="{StaticResource Rows.Text}"
				    Background="Transparent" BorderThickness="0"
                    VerticalGridLinesBrush="{StaticResource Rows.DataGrid.Grid.Vertical}"
                    HorizontalGridLinesBrush="{StaticResource Rows.DataGrid.Grid.Horizontal}"
                    ScrollViewer.IsDeferredScrollingEnabled="{Binding Preferences.Editor.IsDeferredScrollingEnabled, Mode=OneWay}"
                    ColumnWidth="{Binding Preferences.Editor.DefaultColumnWidth, Mode=OneTime}" RowHeaderWidth="8"
                    RowHeight="{Binding Preferences.Editor.DefaultRowHeight, Mode=OneTime}"                      
                    CanUserAddRows="False" CanUserDeleteRows="False" IsReadOnly="{Binding Preferences.Editor.CanEdit, Converter={StaticResource InvertBooleanConverter}, Mode=OneWay}"
                    SelectionMode="Extended" SelectionUnit="CellOrRowHeader"
                    CanUserReorderColumns="{Binding Preferences.Editor.CanEdit, Mode=OneWay}"
				    EnableColumnVirtualization="True" EnableRowVirtualization="True" VirtualizingPanel.ScrollUnit="Pixel">                
                <DataGrid.ContextMenu>
                    <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                        <MenuItem Command="{Binding DataContext.CopyPreview, Mode=OneTime}" Header="Copy image" InputGestureText="Ctrl+Shift+C"/>
                        <MenuItem CommandParameter="{Binding Mode=OneWay}" Command="{Binding DataContext.Cut, Mode=OneTime}" Header="Cut" InputGestureText="Ctrl+X"/>
                        <MenuItem Command="Copy" Header="Copy"/>
                        <MenuItem Command="{Binding DataContext.Paste, Mode=OneTime}" Header="Paste" InputGestureText="Ctrl+V"/>
                        <Separator/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Position.Prepend}" Command="{Binding DataContext.InsertRow, Mode=OneTime}" Header="Prepend rows" InputGestureText="Ctrl+8"/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Position.Prepend}" Command="{Binding DataContext.InsertColumn, Mode=OneTime}" Header="Prepend columns" InputGestureText="Ctrl+H"/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Position.Append}" Command="{Binding DataContext.InsertRow, Mode=OneTime}" Header="Append rows" InputGestureText="Ctrl+,"/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Position.Append}" Command="{Binding DataContext.InsertColumn, Mode=OneTime}" Header="Append columns" InputGestureText="Ctrl+;"/>
                        <MenuItem Command="{Binding DataContext.RenameColumn, Mode=OneTime}" Header="Rename column..." InputGestureText="Ctrl+Shift+R"/>
                        <Separator/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Container.Row}" Command="{Binding DataContext.Clear, Mode=OneTime}" Header="Clear rows" InputGestureText="Ctrl+Delete"/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Container.Column}" Command="{Binding DataContext.Clear, Mode=OneTime}" Header="Clear columns" InputGestureText="Ctrl+Shift+Delete"/>
                        <MenuItem CommandParameter="{x:Static viewmodel:Container.Cell}" Command="{Binding DataContext.Clear, Mode=OneTime}" Header="Clear cells" InputGestureText="Alt+Delete"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedCellsChanged">
                        <i:InvokeCommandAction CommandParameter="{Binding ElementName=Grid, Path=SelectedCells}" Command="{Binding ChangeSelectedCells, Mode=OneTime}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="ColumnReordered">
                        <i:InvokeCommandAction PassEventArgsToCommand="True" Command="{Binding ReorderColumn, Mode=OneTime}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Sorting">
                        <i:InvokeCommandAction Command="{Binding SortColumn, Mode=OneTime}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <i:Interaction.Behaviors>
                    <view:ColumnsBindingBehavior Columns="{Binding DataGridColumns}"/>
                </i:Interaction.Behaviors>
                <DataGrid.Resources>
                    <Style TargetType="Thumb">
                        <Setter Property="Width" Value="8"/>
                        <Setter Property="Cursor" Value="SizeWE"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Thumb">
                                    <Border Background="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="Transparent"/>
                </DataGrid.Resources>
                <DataGrid.InputBindings>
                    <KeyBinding Gesture="CTRL+X" CommandParameter="{Binding ElementName=Grid, Mode=OneWay}" Command="{Binding Cut, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+V" Command="{Binding Paste, Mode=OneTime}"/>

                    <KeyBinding Gesture="CTRL+Z" Command="{Binding Undo, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+Y" Command="{Binding Redo, Mode=OneTime}"/>

                    <KeyBinding Gesture="CTRL+I" CommandParameter="{x:Static viewmodel:Position.Before}" Command="{Binding InsertRow, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+K" CommandParameter="{x:Static viewmodel:Position.After}" Command="{Binding InsertRow, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+J" CommandParameter="{x:Static viewmodel:Position.Before}" Command="{Binding InsertColumn, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+L" CommandParameter="{x:Static viewmodel:Position.After}" Command="{Binding InsertColumn, Mode=OneTime}"/>

                    <KeyBinding Gesture="CTRL+8" CommandParameter="{x:Static viewmodel:Position.Prepend}" Command="{Binding InsertRow, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+OemComma" CommandParameter="{x:Static viewmodel:Position.Append}" Command="{Binding InsertRow, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+H" CommandParameter="{x:Static viewmodel:Position.Prepend}" Command="{Binding InsertColumn, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+OemSemicolon" CommandParameter="{x:Static viewmodel:Position.Append}" Command="{Binding InsertColumn, Mode=OneTime}"/>

                    <KeyBinding Gesture="CTRL+Back" Command="{Binding RemoveSelectedRows, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+Delete" CommandParameter="{x:Static viewmodel:Container.Row}" Command="{Binding Clear, Mode=OneTime}"/>

                    <KeyBinding Gesture="CTRL+SHIFT+Back" Command="{Binding RemoveSelectedColumns, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+SHIFT+Delete" CommandParameter="{x:Static viewmodel:Container.Column}" Command="{Binding Clear, Mode=OneTime}"/>
                    <KeyBinding Gesture="CTRL+SHIFT+R" Command="{Binding RenameColumn, Mode=OneTime}"/>

                    <KeyBinding Key="Delete" CommandParameter="{x:Static viewmodel:Container.Cell}" Command="{Binding Clear, Mode=OneTime}"/>
                </DataGrid.InputBindings>
            </DataGrid>

            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <TextBlock HorizontalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource Caption}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CollectionView.IsEmpty, Mode=OneWay}" Value="True">
                                    <Setter Property="Text" Value="No Matches"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Table.Records.Count, Mode=OneWay}" Value="0">
                                    <Setter Property="Text" Value="No Rows"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Table.Headers.Count, Mode=OneWay}" Value="0">
                                    <Setter Property="Text" Value="No Columns"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Table.Records.Count, Mode=OneWay}" Value="0"/>
                                        <Condition Binding="{Binding Table.Headers.Count, Mode=OneWay}" Value="0"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Empty File"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <TextBlock HorizontalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource Caption}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Table.Records.Count, Mode=OneWay}" Value="0">
                                    <Setter Property="Text" Value="Insert a row using the top toolbar"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Table.Headers.Count, Mode=OneWay}" Value="0">
                                    <Setter Property="Text" Value="Insert a column using the top toolbar"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Table.Records.Count, Mode=OneWay}" Value="0"/>
                                        <Condition Binding="{Binding Table.Headers.Count, Mode=OneWay}" Value="0"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Insert a row and a column using the top toolbar"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </StackPanel>

            <GridSplitter Grid.Column="1" Width="16" Background="Transparent" HorizontalAlignment="Left"/>

            <Image Name="PreviewImage" Grid.Column="1" Source="{Binding Preview, Mode=OneWay}"/>

            <TextBlock Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
                       Text="No Preview Available">
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource Caption}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=PreviewImage, Path=Source, Mode=OneWay}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="Visibility" Value="Hidden"/>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </DockPanel>

    <UserControl.InputBindings>
        <KeyBinding Gesture="CTRL+," Command="{Binding OpenPreferences, Mode=OneTime}"/>
        <KeyBinding Gesture="CTRL+F" Command="{Binding FocusFilter, Mode=OneTime}"/>

        <KeyBinding Gesture="CTRL+SHIFT+C" Command="{Binding CopyPreview, Mode=OneTime}"/>
        <KeyBinding Gesture="CTRL+S" Command="{Binding Save, Mode=OneTime}"/>
    </UserControl.InputBindings>
</UserControl>
